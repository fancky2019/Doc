
GET /_ssl/certificates
#查询ES信息
GET /
#ES 索引名称小写
#查询索引
GET twitter

#查询索引中id=1的文档
GET twitter/_doc/1
GET twitter/_doc/2

GET twittertest
GET twittertest/_search
#创建索引
#3个分片，2个副本
PUT /twittertest
{
    "settings" : {
        "number_of_shards" : 3,
        "number_of_replicas" : 2
    }
}
#或下面简单方式
PUT /twittertest111
GET twittertest111
#创建索引和mapping
GET twittertest
GET twittertest1/_search
GET twittertest1/_mapping
PUT /twittertest1
{
    "settings" : {
        "number_of_shards" : 3,
        "number_of_replicas" : 2
    },
    "mappings" : {
        "properties" : {
            "field1" : { "type" : "text" }
        }
    }
}

#创建索引，并添加文档。
POST demo_person/_doc/1
{
  "id":1,
  "name":"fancky"
}

GET demo_person
GET demo_person/_doc/1
GET demo_person/_search

DELETE demo_person

GET demo_person/_search
{
  "query": {
    "match_all": {
    }
  },
  "sort": [
    {
      "id": {
        "order": "desc"
      }
    }
  ]
}











#创建索引，并添加文档。
POST demo_product/_doc/1
{
  "id":1,
  "product_name":"productname",
  "product_style":"fancky",
  "create_time":"2022-03-07 20:51:57.000",
  "modify_time":"2022-03-07 20:51:57.000",
  "description": "上海",
  "price":1232,
  "count":12,
  "produce_address":"上海市青浦区"
}


#指定分词器
# "product_name": {
#       "type": "text",
#        "analyzer":"ik_max_word"
#      },
#创建索引结构mapping
PUT /demo_product
{
  "mappings": {
    "properties": {
      "id": {
        "type": "long"
      },
      "product_name": {
        "type": "text"
      },
      "product_style": {
        "type": "text"
      },
      "create_time": {
        "type": "date",
        "format": "yyyy-MM-dd HH:mm:ss.SSS||yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis" 
      },
      "modify_time": {
        "type": "date",
        "format": "yyyy-MM-dd HH:mm:ss.SSS||yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis" 
      },
      "description": {
        "type": "text"
      },
      "price": {
        "type": "double"
      },
      "count": {
        "type": "long"
      },
      "produce_address": {
        "type": "text"
      }
    }
  }
}


#查看索引结构
GET demo_product
#查看索引中指定的文档
GET demo_product/_doc/1
#查看所有索引数据
GET demo_product/_search
#删除索引
DELETE demo_product
#根据字段排序查询
GET demo_product/_search
{
  "query": {
    "match_all": {
    }
  },
  "sort": [
    {
      "id": {
        "order": "desc"
      }
    }
  ]
}

#text支持默认ES字段值分词，keyword不支持ES字段值不分  text用于全文搜索的,而keyword用于关键词搜索。
#IK查看分词
#ik_max_word:会穷尽各种可能的组合，适合 Term Query
GET _analyze
{
     "analyzer":"ik_max_word",
     "text":"中国科学院计算研究所"
}
#ik_smart:会做最粗粒度的拆分，适合 Phrase 查询。
GET _analyze
{
   "text":"中华人民共和国MN","tokenizer": "ik_smart"
}
#标准分词
GET _analyze
{
  "analyzer": "standard",
  "text": "中华人民共和国MN"
}



GET demo_product/_analyze
{ "analyzer" : "standard","text" : "this is a test"}

GET demo_product/_analyze
{
   "text":"中华人民共和国MN","tokenizer": "ik_max_word"
}

GET _analyze
{
   "text":"中华人民共和国MN","tokenizer": "ik_max_word"
}

GET _analyze
{
   "text":"中华人民共和国MN","tokenizer": "ik_smart"
}
 


#6之后一个索引只有一个Type,8就没有Type.
#创建索引，并添加文档。
POST twitter/_doc/1
{
  "user":"GB",
  "uid":1,
  "city":"北京"
}

POST twitter/_doc/2
{
  "user":"GB",
  "uid":1,
  "city":"北京2"
}
# 删除文档
DELETE twitter/_doc/1
#不指定id就默认新增或更新id=1的文档
POST twitter/_doc
{
  "user":"GB",
  "uid":1,
  "city":"北京"
}

#POST用于提交请求，可以更新或者创建资源，是非幂等的。
#PUT用于向指定URL传送更新资源，是幂等的。
#修改索引
PUT twitter/_doc/1
{
  "user":"GB",
  "uid":1,
  "city":"BEIjing",
  "location":{
    "lat":"29.084661",
    "lon":"111.335210"
  }
}

POST twitter/_doc/1
{
  "user":"GB",
  "uid":1,
  "city":"北jing",
  "location":{
    "lat":29.084661,
    "lon":111.335210
  }
}

# 修改类似EF整个实体重新提交。没提交的字段就被删除了。
PUT twitter/_doc/1
{
  "user":"GB",
  "uid":1,
  "city":"BEIj"
 
}
#添加新的字段new_field,值为value_of_new_field (老的语法)
POST twitter/_doc/1/_update
{
   "script" : "ctx._source.new_field = 'value_of_new_field'"
}

#添加新的字段new_field,值为value_of_new_field (新的语法）
POST /twitter/_update/1
{
   "script" : "ctx._source.new_field = 'value_of_new_field'"
}

POST /twitter/_update/1
{
   "script" : "ctx._source.user = 'fancky'"
}
POST /twitter/_update/1
{
   "script" : "ctx._source.age = 30"
}
POST /twitter/_update/1
{
    "script" : "ctx._source.remove('user')"
}
#移除字段（老的语法）
POST twitter/_doc/1/_update
{
    "script" : "ctx._source.remove('new_field')"
}

#移除字段（新的语法）
POST /twitter/_update/1
{
    "script" : "ctx._source.remove('new_field')"
}

#条件更新
#“lang”: 表示以何种脚本语言进行修改, “painless”表示以es内置的脚本语言进行修改. 此外es还支持多种脚本语言
#下面修改user=GB的 match相当于数据库的“=”
GET twitter/_doc/1
POST twitter/_update_by_query
{
  "script": {
    "lang": "painless",
    "source": "ctx._source.city=params.city;ctx._source.uid=params.uid;ctx._source.user=params.user",
    "params": {
      "city": "shanghai",
      "uid":3,
       "user":"fancky"
    }
  },
  "query": {
    "match": {
      "user": "fancky"
    }
  }
}
#更新指定的文档
POST twitter/_update/1
{
  "script": {
    "source": "ctx._source.city=params.city;ctx._source.uid=params.uid;ctx._source.user=params.user",
    "params": {
      "city": "shanghai",
      "uid":3,
       "user":"GB"
    }
  }
}
#mapping 数据库的库表结构
#查询索引中文档id=1;
GET /twitter/_doc/1
GET /twitter/_search
GET /twitter/_mapping
#删除索引
DELETE db_test
DELETE twitter
#shards:缺省1一个分片
PUT twitter/_mapping
{
  "properties": {
    "age": {
      "type": "long"
    },
    "city": {
      "type": "text",
      "fields": {
        "keyword": {
          "type": "keyword",
          "ignore_above": 256
        }
      }
    },
        "location" : {
          "properties" : {
            "lat" : {
              "type" : "float"
            },
            "lon" : {
              "type" : "float"
            }
          }
        },
    "uid": {
      "type": "long"
    },
    "user": {
      "type": "text",
      "fields": {
        "keyword": {
          "type": "keyword",
          "ignore_above": 256
        }
      }
    }
  }
}

DELETE test
GET /test/_search
GET /twitter/_mapping

POST test/_doc/1
{
  "user":"GB",
  "uid":1,
  "city":"北jing"
}
#修改mapping
PUT test/_mapping
{
  "properties": {
    "age": {
      "type": "long"
    },
    "city": {
      "type": "text",
      "fields": {
        "keyword": {
          "type": "keyword",
          "ignore_above": 256
        }
      }
    },
    "uid": {
      "type": "long"
    },
    "user": {
      "type": "text",
      "fields": {
        "keyword": {
          "type": "keyword",
          "ignore_above": 256
        }
      }
    },
     "job": {
      "type": "text",
      "fields": {
        "keyword": {
          "type": "keyword",
          "ignore_above": 256
        }
      }
    }
  }
}


DELETE db_test
GET /db_test/_search
GET /db_test/_mapping
GET /db_test/table_student/1
GET /db_test/_doc/1



#**************************************************************
#以上是视频教程基本练习
#**************************************************************
#查询该索引的所有文档
GET /db_test/_search

GET /db_test/_search/
{
 "query": {
    "match_all": {}
  }
}

#添加文档
POST /db_test/_doc/10
{
  "name": "li yuan ba",
  "age": 237,
  "id": 1
}

#删除文档
DELETE db_test/_doc/1
#给文档添加新Field(列)
# 查询原索引的mapping，赋值properties节点下的内容修改。
GET /db_test/_mapping
# elasticsearch索引一旦建立，就无法动态修改其字段的映射类型，
#有时候因为人为原因污染了索引的mapping,这个时候就只能通过重建索引来修改索引的mapping设置了。
PUT db_test/_mapping
{
  "properties": {
    "age": {
      "type": "long"
    },
    "id": {
      "type": "long"
    },
    "name": {
      "type": "text",
      "fields": {
        "keyword": {
          "type": "keyword",
          "ignore_above": 256
        }
      }
    }
  }
}

GET /db_test/_mapping
PUT db_test/_mapping
{
  "properties": {
    "age": {
      "type": "long"
    },
    "id": {
      "type": "long"
    },
    "name": {
      "type": "text",
      "fields": {
        "keyword": {
          "type": "keyword",
          "ignore_above": 256
        }
      }
    },
    "job": {
      "type": "text",
      "fields": {
        "keyword": {
          "type": "keyword",
          "ignore_above": 256
        }
      }
    }
  }
}
#给_mapping添加新的field(列)
#添加的新列，没有值，改字段不会显示在查询结果中
PUT db_test/_mapping
{
  "properties": {
    "birthday": {
      "type": "date",
      "format": "yyyy-MM-dd HH:mm:ss"
    }
  }
}
#elasticsearch索引一旦建立，就无法动态修改其字段的映射类型，
#只能通过重建索引来修改索引的mapping设置了。
PUT db_test/_mapping
{
  "properties": {
    "testfield1": {
      "type": "text",
      "fields": {
        "keyword": {
          "type": "keyword",
          "ignore_above": 256
        }
      }
    },
    "testfield2": {
      "type": "text",
      "fields": {
        "keyword": {
          "type": "keyword",
          "ignore_above": 256
        }
      }
    }
  }
}

  

#批量更新
POST db_test/_update_by_query
{
   "query": {
    "match_all": {}
  },
    "script" : "ctx._source.job = 'nongmin'"
}
#批量更新语法2：
POST db_test/_update_by_query
{
    "script" : "ctx._source.testfield1 = 'testfield1'"
}
POST db_test/_update_by_query
{
    "script" : "ctx._source.testfield2 = 'testfield2'"
}

#批量移除字段
POST db_test/_update_by_query
{
   "script" : "ctx._source.remove('testfield2')"
}


GET /db_test/_search/
{
 "query": {
    "match_all": {}
  }
}

GET /db_test/_mapping



POST /db_test/_doc/_update/
{
   "script" : "ctx._source.job = 'nongmin'"
}



#match 标识分词匹配，term标识完全匹配， range 标识范围
#match和term区别可以理解为term是精确查询，这边match模糊查询；match会对“李瑞”分词为两个单词，
#然后term对认为这是个单词
#   "size": 100 前100条
# "from": 2, 跳过2条，类似  from...  size 相当于 limit 2,100
GET /db_test/_search/
{
  "query": {
    "match": {
      "name": "李"
    }
  },
  "from": 2,
  "size": 100
}

#多个条件查询 bool must  
#and (name='李'and age=30)
GET /db_test/_search/
{
 "query":{
      "bool": {
        "must": [
          {"match":{"name":"李"}},
          {"match":{"age":30}}
        ]
      }
    }
}
#or  (name='李'or age=30)
#多个值查询可以用 bool shold 
GET /db_test/_search/
{
 "query":{
      "bool": {
        "should": [
          {"match":{"name":"李"}},
          {"match":{"age":30}}
        ]
      }
    }
}

GET /db_test/_search
GET /db_test/_mapping
#Text：会分词，然后进行索引；支持模糊、精确查询；不支持聚合

#keyword：不进行分词，直接索引；支持模糊、精确查询；支持聚合
#type数据类型一般文本使用text(可分词进行模糊查询)；keyword无法被分词(不需要执行分词器)，用于精确查找
#fields#可以对一个字段提供多种索引模式，使用text类型做全文检索，也可使用keyword类型做聚合和排序
#查询不到，内部已经分词
GET /db_test/_search/
{
  "query": {
    "term": {
      "name":"li yuan"
    }
  }
}
GET /db_test/_search
GET /db_test
#可以精确查找到name=li yuan的数据
GET /db_test/_search/
{
  "query": {
    "term": {
      "name.keyword":"li yuan"
    }
  }
}
GET /db_test/_search/
{
  "query": {
    "match": {
      "name":"li yuan"
    }
  }
}

#**************************************************************
#查询 测试
#**************************************************************
GET /demo_product
GET /demo_product/_search

GET demo_product/_search
{
  "query": {
    "match_all": {
    }
  },
  "sort": [
    {
      "id": {
        "order": "desc"
      }
    }
  ]
}

#不指定分词时，会使用默认的standard分词器
#standard
#IK查看分词 ik_smart ik_max_word 
#ik_max_word:会穷尽各种可能的组合，适合 Term Query

GET _analyze
{
  "analyzer": "standard",
  "text": "中国上海"
}

GET _analyze
{
  "analyzer": "ik_max_word",
  "text": "中国上海"
}
#text类型的数据在elasticsearch中会进行分词并建立倒排索引，因此它会对每个词进行索引，而不会建立整个句子的索引。
#term 查询text不能指定分词器只能使用默认standard分词器，只能在创建mapping时候指定分词器。
#查询适合keyword、numeric. date.
GET /demo_product/_search
{
  "query": {
    "term": {
      "create_time": "2022-03-07 20:51:54"
    }
  }
}
GET /demo_product/_search
{
  "query": {
    "term": {
      "price": 9
    }
  }
}
#term 命中text类型字段分词中的一个，term不会分词待查询的字段
GET /demo_product/_search
{
  "query": {
    "term": {
      "product_name": "fancky"
    }
  }
}
GET /demo_product/_search
{
  "query": {
    "term": {
      "product_name": "fancky"
    }
  }
}

GET /demo_person/_search
#查询关键字 完全匹配
GET /demo_person/_search
{
  "query": {
    "term": {
      "name.keyword": "fancky"
    }
  }
}


#match会分词查询的字段
GET /demo_product/_search
{
  "query": {
    "match": {
      "product_name": "fancky china"
    }
  }
}

GET /demo_product/_search
{
  "query": {
    "match": {
      "product_name": {
        "query": "上海在中国"
      }
    }
  }
}

GET /demo_product/_search
{
  "query": {
    "match": {
      "product_name": {
        "query": "china fancky"
      }
    }
  }
}
# 分词顺序无关
GET /demo_product/_search
{
  "query": {
    "match": {
      "product_name": {
        "query": "fancky china"
      }
    }
  }
}



GET /demo_product/_search
{
  "query": {
    "multi_match": {
      "query": "上海中国",
      "fields": [
        "product_name",
        "produce_address"
      ]
    }
  }
}

GET /demo_product/_search
{
	"query":{
		"query_string":{
			"query":"人民中国",
			"fields":["product_name","produce_address"]
		}
	}
}

GET /demo_product/_search
{
  "query": {
    "match_phrase": {
      "product_name": {
        "query": "中国上海"
      }
    }
  }
}

GET /demo_product/_search
{
  "query": {
    "match_phrase": {
      "product_name": {
        "query": "china fancky"
      }
    }
  }
}

#分词和顺序有关
GET /demo_product/_search
{
  "query": {
    "match_phrase": {
      "product_name": {
        "query": "fancky china"
      }
    }
  }
}




GET /demo_person/_search
{
  "query": {
    "match": {
      "name.keyword": "fancky test"
    }
  }
}

GET /demo_person/_search

#query_string
GET /demo_person/_search
{
	"query":{
		"query_string":{
			"query":"fancky test",
			"fields":["name.keyword"]
		}
	}
}
















GET /demo_product/_search
{
  "query": {
    "match": {
      "product_name": {
        "query": "上海在中国",
        "analyzer": "standard"
      }
    }
  }
}



GET /demo_product/_search
{
  "query": {
    "match": {
      "product_name": {
        "query": "中国上海",
        "analyzer": "ik_smart"
      }
    }
  }
}


#**************************************************************
#java Jest 测试
#**************************************************************
DELETE  /test_java
PUT /test_java

GET /test_java/
GET /test_java/_search
GET /test_java/_mapping

PUT /test_java/_mapping
{
  "properties": {
    "job": {
      "type": "text",
      "fields": {
        "keyword": {
          "type": "keyword",
          "ignore_above": 256
        }
      }
    }
  }
}


POST /test_java/_doc/1
{
  "name": "li yuan ba",
  "age": 237,
  "id": 1
}

DELETE  /test_java
PUT /test_java

GET /test_java/
GET /test_java/_search
GET /test_java/_mapping

POST /test_java/_update_by_query
{
  "query": {
    "match": {
      "id": 1
    }
  },
  "script": {
    "lang": "painless",
    "source": "ctx._source.name=params.name;ctx._source.age=params.age",
    "params": {
      "name": "李元霸1",
      "age": 27
    }
  }
}




